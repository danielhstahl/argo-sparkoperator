# This example demonstrates the 'resource' template type, which provides a
# convenient way to create/update/delete any type of kubernetes resources
# in a workflow. The resource template type accepts any k8s manifest
# (including CRDs) and can perform any kubectl action against it (e.g. create,
# apply, delete, patch).
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
    generateName: k8s-jobs-
spec:
    entrypoint: pi-tmpl
    templates:
      - name: pi-tmpl
        resource:
            action: create
            # successCondition and failureCondition are optional expressions which are
            # evaluated upon every update of the resource. If failureCondition is ever
            # evaluated to true, the step is considered failed. Likewise, if successCondition
            # is ever evaluated to true the step is considered successful. It uses kubernetes
            # label selection syntax and can be applied against any field of the resource
            # (not just labels). Multiple AND conditions can be represented by comma
            # delimited expressions. For more details, see:
            # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
            successCondition: status.applicationState.state == COMPLETED
            failureCondition: status.applicationState.state == FAILED
            manifest: |
                apiVersion: "sparkoperator.k8s.io/v1beta2"
                kind: SparkApplication
                metadata:
                    generateName: spark-pi-job-
                    namespace: default
                spec:
                    type: Scala
                    mode: cluster
                    image: "gcr.io/spark-operator/spark:v2.4.5"
                    imagePullPolicy: Always
                    mainClass: org.apache.spark.examples.SparkPi
                    mainApplicationFile: "local:///opt/spark/examples/jars/spark-examples_2.11-2.4.5.jar"
                    sparkVersion: "2.4.5"
                    restartPolicy:
                        type: OnFailure
                        onFailureRetries: 3
                        onFailureRetryInterval: 10
                    driver:
                        cores: 1
                        coreLimit: "1200m"
                        memory: "512m"
                        labels:
                            version: 2.4.5
                        serviceAccount: spark
                    executor:
                        cores: 1
                        instances: 1
                        memory: "512m"
                        labels:
                            version: 2.4.5
    # Resource templates can have output parameters extracted from fields of the
    # resource. Two techniques are provided: jsonpath and a jq filter.
        outputs:
            parameters:
      # job-name is extracted using a jsonPath expression and is equivalent to:
      # `kubectl get job <jobname> -o jsonpath='{.metadata.name}'`
              - name: job-name
                valueFrom:
                    jsonPath: '{.metadata.name}'
      # job-obj is extracted using a jq filter and is equivalent to:
      # `kubectl get job <jobname> -o json | jq -c '.'
      # which returns the entire job object in json format
              - name: job-obj
                valueFrom:
                    jqFilter: '.'
                